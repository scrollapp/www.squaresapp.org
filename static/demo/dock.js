"use strict";
var Dock;
(function (Dock) {
    /** */
    function cover(edge = 0) {
        const e = string(edge);
        return { position, top: e, right: e, bottom: e, left: e };
    }
    Dock.cover = cover;
    /** */
    function coverFixed(edge = 0) {
        const e = string(edge);
        return { position: f, top: e, right: e, bottom: e, left: e };
    }
    Dock.coverFixed = coverFixed;
    //# Corners
    /** */
    function topLeft(x = 0, y = x) {
        return { position, top: string(y), left: string(x) };
    }
    Dock.topLeft = topLeft;
    /** */
    function topLeftFixed(x = 0, y = x) {
        return { position: f, top: string(y), left: string(x) };
    }
    Dock.topLeftFixed = topLeftFixed;
    /** */
    function topRight(x = 0, y = x) {
        return { position, top: string(y), right: string(x) };
    }
    Dock.topRight = topRight;
    /** */
    function topRightFixed(x = 0, y = x) {
        return { position: f, top: string(y), right: string(x) };
    }
    Dock.topRightFixed = topRightFixed;
    /** */
    function bottomLeft(x = 0, y = x) {
        return { position, bottom: string(y), left: string(x) };
    }
    Dock.bottomLeft = bottomLeft;
    /** */
    function bottomLeftFixed(x = 0, y = x) {
        return { position: f, bottom: string(y), left: string(x) };
    }
    Dock.bottomLeftFixed = bottomLeftFixed;
    /** */
    function bottomRight(x = 0, y = x) {
        return { position, bottom: string(y), right: string(x) };
    }
    Dock.bottomRight = bottomRight;
    /** */
    function bottomRightFixed(x = 0, y = x) {
        return { position: f, bottom: string(y), right: string(x) };
    }
    Dock.bottomRightFixed = bottomRightFixed;
    //# Edges
    /** */
    function top(edge = 0) {
        const e = string(edge);
        return { position, top: e, left: e, right: e };
    }
    Dock.top = top;
    /** */
    function topFixed(edge = 0) {
        const e = string(edge);
        return { position: f, top: e, left: e, right: e };
    }
    Dock.topFixed = topFixed;
    /** */
    function right(edge = 0) {
        const e = string(edge);
        return { position, top: e, right: e, bottom: e };
    }
    Dock.right = right;
    /** */
    function rightFixed(edge = 0) {
        const e = string(edge);
        return { position: f, top: e, right: e, bottom: e };
    }
    Dock.rightFixed = rightFixed;
    /** */
    function bottom(edge = 0) {
        const e = string(edge);
        return { position, left: e, bottom: e, right: e };
    }
    Dock.bottom = bottom;
    /** */
    function bottomFixed(edge = 0) {
        const e = string(edge);
        return { position: f, left: e, bottom: e, right: e };
    }
    Dock.bottomFixed = bottomFixed;
    /** */
    function left(edge = 0) {
        const e = string(edge);
        return { position, top: e, left: e, bottom: e };
    }
    Dock.left = left;
    /** */
    function leftFixed(edge = 0) {
        const e = string(edge);
        return { position: f, top: e, left: e, bottom: e };
    }
    Dock.leftFixed = leftFixed;
    //# Centers
    /** */
    function center(width = "fit-content", height = "fit-content") {
        return {
            ...cover(),
            ...centerValues(width, height)
        };
    }
    Dock.center = center;
    /** */
    function centerFixed(width = "fit-content", height = width) {
        return { ...center(width, height), position: f };
    }
    Dock.centerFixed = centerFixed;
    /** */
    function centerTop(width = "fit-content", height = width) {
        return {
            ...top(),
            ...centerValues(width, height),
        };
    }
    Dock.centerTop = centerTop;
    /** */
    function centerTopFixed(width = "fit-content", height = width) {
        return { ...centerTop(width, height), position: f };
    }
    Dock.centerTopFixed = centerTopFixed;
    /** */
    function centerRight(width = "fit-content", height = width) {
        return {
            ...right(),
            ...centerValues(width, height),
        };
    }
    Dock.centerRight = centerRight;
    /** */
    function centerRightFixed(width = "fit-content", height = width) {
        return { ...centerRight(width, height), position: f };
    }
    Dock.centerRightFixed = centerRightFixed;
    /** */
    function centerBottom(width = "fit-content", height = width) {
        return {
            ...bottom(),
            ...centerValues(width, height),
        };
    }
    Dock.centerBottom = centerBottom;
    /** */
    function centerBottomFixed(width = "fit-content", height = width) {
        return { ...centerBottom(width, height), position: f };
    }
    Dock.centerBottomFixed = centerBottomFixed;
    /** */
    function centerLeft(width = "fit-content", height = width) {
        return {
            ...left(),
            ...centerValues(width, height),
        };
    }
    Dock.centerLeft = centerLeft;
    /** */
    function centerLeftFixed(width = "fit-content", height = width) {
        return { ...centerLeft(width, height), position: f };
    }
    Dock.centerLeftFixed = centerLeftFixed;
    /** */
    function centerValues(width, height) {
        const out = { margin: "auto" };
        if (width !== "")
            out.width = typeof width === "number" ? width + "px" : width;
        if (height !== "")
            out.height = typeof height === "number" ? height + "px" : height;
        return out;
    }
    const position = "absolute";
    const f = "fixed";
    /** */
    function string(s) {
        return typeof s === "string" ? s : (s || 0) + "px";
    }
    //@ts-ignore
    if (typeof module === "object")
        Object.assign(module.exports, { Dock });
})(Dock || (Dock = {}));
//# sourceMappingURL=data:application/json;base64,